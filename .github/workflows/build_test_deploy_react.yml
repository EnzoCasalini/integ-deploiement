name: CI/CD – React, FastAPI, Docker, Cypress

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies and run unit/integration tests
        working-directory: ./
        env:
          VITE_REACT_APP_API_URL: ${{ secrets.VITE_REACT_APP_API_URL }}
        run: |
          npm ci
          npm run coverage
          npm run jsdoc
          npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          working-directory: ./

      - name: Upload dist for GitHub Pages
        uses: actions/upload-artifact@v4
        with:
          name: github-pages-dist
          path: dist

  docker_and_e2e:
    runs-on: ubuntu-latest
    needs: build_test
    
    steps:
      - uses: actions/checkout@v4

      - name: Recreate .env file securely
        run: echo "$ENV_FILE" > .env
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}

      - name: Start Docker environment
        run: docker compose up -d --build
        working-directory: ./

      - name: Wait for services to be ready
        run: |
          echo "Waiting for backend (http://localhost:8000) to be ready..."
          timeout 90 bash -c 'until curl -f http://localhost:8000 > /dev/null 2>&1; do sleep 2; done'
          echo "Waiting for frontend (http://localhost:3000) to be ready..."
          timeout 90 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

      - name: Afficher les logs du front
        run: docker logs react-app

      - name: Vérifier le contenu du build React
        run: docker exec react-app ls -l /app/dist

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install front dependencies
        run: npm ci

      - name: Run Cypress tests against Docker environment
        env:
          VITE_REACT_APP_API_URL: http://localhost:8000
          CYPRESS_BASE_URL: http://localhost:3000
        run: |
          npx cypress install
          npx cypress run

  deploy_pages:
    needs: build_test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Download dist from previous job
        uses: actions/download-artifact@v4
        with:
          name: github-pages-dist
          path: dist

      - name: Build for GitHub Pages
        run: npm run build
        env:
          VITE_BASE_PATH: /integ-deploiement/

      - name: Create .nojekyll
        run: echo > dist/.nojekyll
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  deploy_npm:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Babel dependencies
        run: npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react

      - name: Build npm package
        run: npm run build-npm-ci
        working-directory: ./

      - name: Configure Git
        run: |
          git config --global user.email "enzocasa83@gmail.com"
          git config --global user.name "EnzoCasalini"

      - name: Setup npm auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Check if version is already published
        run: |
          PKG_NAME=$(node -p "require('./package.json').name")
          PKG_VERSION=$(node -p "require('./package.json').version")
          if npm view "$PKG_NAME@$PKG_VERSION" > /dev/null 2>&1; then
            echo "Version $PKG_VERSION already exists on NPM. Skipping publish."
            exit 1
          fi

      - name: Publish to NPM
        run: npm publish
        working-directory: ./
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy_backend_vercel:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy FastAPI to Vercel
        run: npx vercel deploy --prod --yes --token ${{ secrets.VERCEL_TOKEN }}
        working-directory: ./server